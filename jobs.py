import os
import json
import datetime
from io import BytesIO

from telegram import Bot
from telegram.constants import ParseMode
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import pandas as pd
import pytz

# Define o diret√≥rio da aplica√ß√£o para garantir caminhos de arquivo corretos
APP_DIR = os.path.dirname(os.path.abspath(__file__))
DADOS_FILE = os.path.join(APP_DIR, "dados.json")

# Define o fuso hor√°rio para as opera√ß√µes do seu bot
TIMEZONE = 'America/Sao_Paulo'
SAO_PAULO_TZ = pytz.timezone(TIMEZONE)


def load_data():
    if not os.path.exists(DADOS_FILE):
        return {}
    with open(DADOS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_data(data):
    with open(DADOS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# NOVO: Fun√ß√£o para enviar o resumo di√°rio (chamada toda noite √†s 20h)
async def send_daily_summary_job(context):
    bot: Bot = context.bot
    data = load_data()

    for chat_id, user_data in data.items():
        tarefas = user_data.setdefault("tarefas", [])
        
        now_aware = datetime.datetime.now(SAO_PAULO_TZ)
        today = now_aware.date()
        tomorrow = today + datetime.timedelta(days=1)

        # Filtra tarefas para o dia atual e para amanh√£
        tasks_today_pending = []
        tasks_tomorrow_scheduled = []
        
        for task in tarefas:
            try:
                task_start_dt_naive = datetime.datetime.fromisoformat(task['start_when'])
                task_start_dt_aware = SAO_PAULO_TZ.localize(task_start_dt_naive)
                task_date = task_start_dt_aware.date()
            except (ValueError, TypeError):
                context.application.logger.warning(f"Data de in√≠cio inv√°lida para a tarefa: {task.get('activity')}. Pulando.")
                continue

            # Tarefas de hoje que ainda n√£o foram conclu√≠das e que o tempo ainda n√£o passou (ou passou muito pouco)
            if task_date == today and not task.get('done', False) and (task_start_dt_aware > now_aware - datetime.timedelta(hours=12)): # Considera 12h para "atrasadas" no resumo noturno
                tasks_today_pending.append(task)
            # Tarefas agendadas para amanh√£
            elif task_date == tomorrow:
                tasks_tomorrow_scheduled.append(task)

        msg_parts = []
        msg_parts.append(f"‚ú® *Seu Resumo Noturno* ({today.strftime('%d/%m/%Y')}):")
        msg_parts.append("\n_Prepare-se para um dia incr√≠vel!_")

        if tasks_today_pending:
            msg_parts.append("\n‚è∞ Tarefas que *ainda* est√£o pendentes para HOJE:")
            for t in sorted(tasks_today_pending, key=lambda x: datetime.datetime.fromisoformat(x['start_when']).time()):
                start_time = datetime.datetime.fromisoformat(t['start_when']).strftime('%H:%M')
                msg_parts.append(f"‚Ä¢ {t['activity']} √†s {start_time}")
        
        if tasks_tomorrow_scheduled:
            msg_parts.append(f"\nüóìÔ∏è *Sua agenda para AMANH√É* ({tomorrow.strftime('%d/%m/%Y')}):")
            for t in sorted(tasks_tomorrow_scheduled, key=lambda x: datetime.datetime.fromisoformat(x['start_when']).time()):
                start_time = datetime.datetime.fromisoformat(t['start_when']).strftime('%H:%M')
                end_time_str = ""
                if t.get('end_when'):
                    try:
                        end_time_str = f" at√© {datetime.datetime.fromisoformat(t['end_when']).strftime('%H:%M')}"
                    except (ValueError, TypeError):
                        pass # Ignora se a data de fim for inv√°lida
                msg_parts.append(f"‚Ä¢ {t['activity']} √†s {start_time}{end_time_str}")
        else:
            msg_parts.append("\nüéâ Nada agendado para amanh√£ ainda! Que tal planejar algo produtivo? üòâ")

        msg_parts.append("\nLembre-se: Cada dia √© uma nova chance de brilhar! ‚ú®")

        try:
            await bot.send_message(
                chat_id=int(chat_id),
                text="\n".join(msg_parts),
                parse_mode=ParseMode.MARKDOWN
            )
            context.application.logger.info(f"Resumo di√°rio enviado para {chat_id}.")
        except Exception as e:
            context.application.logger.error(f"Erro ao enviar resumo di√°rio para {chat_id}: {e}", exc_info=True)


async def weekly_report_job(context):
    bot: Bot = context.bot
    data = load_data()

    now_aware = datetime.datetime.now(SAO_PAULO_TZ)
    today = now_aware.date()
    
    # Reporta a semana *que terminou* (do domingo passado at√© hoje)
    report_end_date = today
    report_start_date = report_end_date - datetime.timedelta(days=6)

    for chat_id, user in data.items():
        completed_tasks_week = []
        not_completed_tasks_week = []
        imprevistos_week = []
        weekly_score_contribution = 0 # Pontos ganhos *nesta semana*
        total_score = user.get("score", 0)

        for task in user.get("tarefas", []):
            try:
                task_start_dt_naive = datetime.datetime.fromisoformat(task['start_when'])
                task_start_dt_aware = SAO_PAULO_TZ.localize(task_start_dt_naive)
                task_date = task_start_dt_aware.date()
            except (ValueError, TypeError):
                continue

            if report_start_date <= task_date <= report_end_date:
                if task.get('completion_status') == 'completed_on_time' or task.get('completion_status') == 'completed_manually':
                    completed_tasks_week.append(task['activity'])
                    # Assumimos 10 pontos por tarefa conclu√≠da. Isso precisa ser consistente.
                    # Se voc√™ armazenar os pontos ganhos por tarefa, some isso aqui.
                    # Por enquanto, vou manter a l√≥gica de 10 pontos fixos por tarefa conclu√≠da na semana.
                    weekly_score_contribution += 10 
                elif task.get('completion_status') == 'not_completed':
                    not_completed_tasks_week.append(task['activity'])
                    if task.get('reason_not_completed'):
                        imprevistos_week.append(f"- *{task['activity']}*: {task['reason_not_completed']}")

        # --- Envio do resumo semanal via mensagem de texto ---
        summary_message = f"üéâ *Seu Relat√≥rio Semanal de Brilho* ({report_start_date.strftime('%d/%m')} a {report_end_date.strftime('%d/%m')}): ‚ú®\n\n"
        
        summary_message += "*üìà Metas da Semana:*\n"
        metas_exist = False
        for m in user.get("metas", []):
            metas_exist = True
            prog = m.get("progress", 0)
            target = m.get("target", 1)
            summary_message += f"‚Ä¢ {m['activity']} ({prog}/{target})\n"
        if not metas_exist:
            summary_message += "Nenhuma meta definida esta semana. Que tal tra√ßar novos horizontes? üöÄ\n"

        summary_message += "\n*‚úÖ Tarefas Conclu√≠das:*\n"
        if completed_tasks_week:
            summary_message += "\n".join(f"‚Ä¢ {t}" for t in completed_tasks_week) + "\n"
        else:
            summary_message += "Nenhuma tarefa conclu√≠da esta semana. Vamos planejar mais para a pr√≥xima! üí™\n"

        summary_message += "\n*‚ùå Tarefas N√£o Conclu√≠das:*\n"
        if not_completed_tasks_week:
            summary_message += "\n".join(f"‚Ä¢ {t}" for t in not_completed_tasks_week) + "\n"
        else:
            summary_message += "Todas as tarefas foram um sucesso! Que maravilha! üéâ\n"

        if imprevistos_week:
            summary_message += "\n*‚ö†Ô∏è Imprevistos e Desafios:*\n"
            summary_message += "\n".join(imprevistos_week) + "\n"

        summary_message += f"\nüìä *Pontua√ß√£o da Semana*: *{weekly_score_contribution}* pontos!\n"
        summary_message += f"üèÜ *Pontua√ß√£o Total Acumulada*: *{total_score}* pontos!\n\n"
        summary_message += "Cada passo conta! Continue firme na sua jornada! Voc√™ √© incr√≠vel! ‚ú®"

        try:
            await bot.send_message(
                chat_id=int(chat_id),
                text=summary_message,
                parse_mode=ParseMode.MARKDOWN
            )
            context.application.logger.info(f"Relat√≥rio semanal em texto enviado para {chat_id}.")
        except Exception as e:
            context.application.logger.error(f"Erro ao enviar relat√≥rio semanal em texto para {chat_id}: {e}", exc_info=True)


        # --- Gera√ß√£o e envio do PDF (mantido como uma op√ß√£o robusta de relat√≥rio) ---
        buffer = BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        pdf.setTitle("Relat√≥rio Semanal de Produtividade")
        
        pdf.setFillColorRGB(0.1, 0.4, 0.7)
        pdf.setFont("Helvetica-Bold", 24)
        pdf.drawString(50, 780, "üåü Seu Relat√≥rio Semanal de Produtividade! üåü")
        
        pdf.setFillColorRGB(0, 0, 0)
        pdf.setFont("Helvetica", 12)
        y = 750
        
        pdf.drawString(50, y, f"Per√≠odo: {report_start_date.strftime('%d/%m/%Y')} a {report_end_date.strftime('%d/%m/%Y')}")
        y -= 25

        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, "üìà Metas da Semana:")
        y -= 20
        pdf.setFont("Helvetica", 12)
        for m in user.get("metas", []):
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, f"‚Ä¢ {m['activity']} (Progresso: {m.get('progress', 0)}/{m.get('target', 1)})")
            y -= 15
        if not metas_exist:
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, "Nenhuma meta definida esta semana. Que tal tra√ßar novos horizontes?")
            y -= 15

        y -= 20
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, "‚úÖ Tarefas Conclu√≠das:")
        y -= 20
        pdf.setFont("Helvetica", 12)
        if completed_tasks_week:
            for t_desc in completed_tasks_week:
                if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
                pdf.drawString(60, y, f"‚Ä¢ {t_desc}")
                y -= 15
        else:
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, "Nenhuma tarefa conclu√≠da esta semana. Mas cada novo dia √© uma oportunidade!")
            y -= 15

        y -= 20
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, "‚ùå Tarefas N√£o Conclu√≠das:")
        y -= 20
        pdf.setFont("Helvetica", 12)
        if not_completed_tasks_week:
            for t_desc in not_completed_tasks_week:
                if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
                pdf.drawString(60, y, f"‚Ä¢ {t_desc}")
                y -= 15
        else:
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, "Todas as tarefas foram um sucesso! Mandou bem!")
            y -= 15

        if imprevistos_week:
            y -= 20
            pdf.setFont("Helvetica-Bold", 14)
            pdf.drawString(50, y, "‚ö†Ô∏è Imprevistos e Desafios:")
            y -= 20
            pdf.setFont("Helvetica", 12)
            for imp in imprevistos_week:
                if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
                pdf.drawString(60, y, imp)
                y -= 15

        y -= 20
        pdf.setFont("Helvetica-Bold", 14)
        if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, f"üìä Pontua√ß√£o da Semana: {weekly_score_contribution} pontos")
        y -= 20
        if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, f"üèÜ Pontua√ß√£o Total Acumulada: {total_score} pontos")
        y -= 30
        
        pdf.setFont("Helvetica-Oblique", 10)
        if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica-Oblique", 10)
        pdf.drawString(50, y, "Lembre-se: Cada passo, por menor que seja, te leva mais perto dos seus sonhos! Continue a brilhar! ‚ú®")

        pdf.showPage()
        pdf.save()
        buffer.seek(0)

        try:
            await bot.send_document(
                chat_id=int(chat_id),
                document=buffer,
                filename=f"relatorio_semanal_{report_end_date.strftime('%Y%m%d')}.pdf",
                caption=f"üéâ Seu Relat√≥rio Semanal de Produtividade est√° aqui! {report_start_date.strftime('%d/%m')} a {report_end_date.strftime('%d/%m')}. üòâ"
            )
            context.application.logger.info(f"Relat√≥rio semanal PDF enviado para {chat_id}.")
        except Exception as e:
            context.application.logger.error(f"Erro ao enviar relat√≥rio semanal PDF para {chat_id}: {e}", exc_info=True)


def weekly_backup_job(context):
    bot: Bot = context.bot
    data = load_data()
    timestamp = datetime.datetime.now(SAO_PAULO_TZ).strftime("%Y%m%d_%H%M")

    try:
        backup_json_path = os.path.join(APP_DIR, f"backup_{timestamp}.json")
        with open(backup_json_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        context.application.logger.info(f"Backup JSON criado em {backup_json_path}")

        rows = []
        for chat_id, user in data.items():
            for m in user.get("metas", []):
                rows.append({
                    "chat_id": chat_id,
                    "tipo": "meta",
                    "activity": m["activity"],
                    "progress": m.get("progress", 0),
                    "target": m.get("target", 1),
                    "start_when": None,
                    "end_when": None,
                    "done": None,
                    "completion_status": None,
                    "reason_not_completed": None,
                    "job_names": None # N√£o se aplica a metas
                })
            for t in user.get("tarefas", []):
                rows.append({
                    "chat_id": chat_id,
                    "tipo": "tarefa",
                    "activity": t["activity"],
                    "done": t.get("done", False),
                    "start_when": t.get("start_when", ""),
                    "end_when": t.get("end_when", ""),
                    "completion_status": t.get("completion_status", None),
                    "reason_not_completed": t.get("reason_not_completed", None),
                    "progress": None,
                    "target": None,
                    "job_names": json.dumps(t.get("job_names", [])) if t.get("job_names") else "[]" # Salva como string JSON
                })

        df = pd.DataFrame(rows)
        backup_csv_path = os.path.join(APP_DIR, f"backup_{timestamp}.csv")
        df.to_csv(backup_csv_path, index=False)
        context.application.logger.info(f"Backup CSV criado em {backup_csv_path}")

    except Exception as e:
        context.application.logger.error(f"Erro ao realizar o backup semanal: {e}", exc_info=True)

# NOVO: Job para limpar tarefas antigas/conclu√≠das do JSON
async def clean_up_old_tasks_job(context):
    data = load_data()
    now_aware = datetime.datetime.now(SAO_PAULO_TZ)
    
    tasks_cleaned_count = 0
    for chat_id, user_data in data.items():
        if "tarefas" in user_data:
            # Mant√©m apenas as tarefas que n√£o est√£o 'done' ou que s√£o recentes (√∫ltimos 30 dias)
            # Remove tarefas conclu√≠das que sejam mais antigas que 7 dias
            # Remove tarefas n√£o conclu√≠das que sejam mais antigas que 30 dias
            
            # Ajustei a l√≥gica de remo√ß√£o:
            # Se uma tarefa estiver "done", ela √© mantida por 7 dias. Ap√≥s isso, √© removida.
            # Se uma tarefa n√£o estiver "done" e o hor√°rio de fim (ou in√≠cio se n√£o tiver fim) j√° passou h√° mais de 30 dias, √© removida.
            # Tarefas recorrentes que n√£o foram "done" mas j√° passaram, ser√£o mantidas na lista de n√£o-conclu√≠das, mas seu job ser√° removido.
            
            updated_tasks = []
            for task in user_data["tarefas"]:
                try:
                    task_start_dt_naive = datetime.datetime.fromisoformat(task['start_when'])
                    task_dt_aware = SAO_PAULO_TZ.localize(task_start_dt_naive)
                    
                    # Calcula a data de refer√™ncia para remo√ß√£o
                    reference_date = task_dt_aware
                    if task.get('end_when'):
                        end_dt_naive = datetime.datetime.fromisoformat(task['end_when'])
                        end_dt_aware = SAO_PAULO_TZ.localize(end_dt_naive)
                        reference_date = end_dt_aware
                        
                    if task.get('done', False):
                        # Se conclu√≠da, remove se tiver mais de 7 dias
                        if (now_aware - reference_date).days > 7:
                            tasks_cleaned_count += 1
                            # N√£o precisamos cancelar jobs aqui, eles j√° deveriam ter rodado ou sido cancelados ao marcar como done
                            continue # N√£o adiciona √† lista
                    elif task.get('completion_status') == 'not_completed':
                        # Se n√£o conclu√≠da, remove se tiver mais de 30 dias
                        if (now_aware - reference_date).days > 30:
                            tasks_cleaned_count += 1
                            continue # N√£o adiciona √† lista
                    elif reference_date < now_aware - datetime.timedelta(days=30):
                         # Tarefas pendentes muito antigas (mais de 30 dias atr√°s) que n√£o foram marcadas
                         tasks_cleaned_count += 1
                         continue
                         
                except (ValueError, TypeError):
                    context.application.logger.warning(f"Tarefa com data inv√°lida encontrada durante a limpeza: {task.get('activity')}. Removendo.")
                    tasks_cleaned_count += 1
                    continue # Remove tarefas com datas inv√°lidas
                
                updated_tasks.append(task)
            user_data["tarefas"] = updated_tasks
    
    if tasks_cleaned_count > 0:
        save_data(data)
        context.application.logger.info(f"Limpeza de tarefas conclu√≠da. {tasks_cleaned_count} tarefas antigas foram removidas.")
    else:
        context.application.logger.info("Nenhuma tarefa antiga para limpar.")
