import os
import json
import datetime
from io import BytesIO

from telegram import Bot
from telegram.constants import ParseMode
from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
import pandas as pd
import pytz

# Define o diret√≥rio da aplica√ß√£o para garantir caminhos de arquivo corretos
APP_DIR = os.path.dirname(os.path.abspath(__file__))
DADOS_FILE = os.path.join(APP_DIR, "dados.json")

# Define o fuso hor√°rio para as opera√ß√µes do seu bot
TIMEZONE = 'America/Sao_Paulo'
SAO_PAULO_TZ = pytz.timezone(TIMEZONE)


def load_data():
    if not os.path.exists(DADOS_FILE):
        return {}
    with open(DADOS_FILE, "r", encoding="utf-8") as f:
        return json.load(f)


def save_data(data):
    with open(DADOS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# NOVO: Fun√ß√£o para enviar o resumo di√°rio (chamada toda noite √†s 20h)
async def send_daily_summary_job(context):
    bot: Bot = context.bot
    data = load_data()

    for chat_id, user_data in data.items():
        tarefas = user_data.setdefault("tarefas", [])
        
        now_aware = datetime.datetime.now(SAO_PAULO_TZ)
        today = now_aware.date()
        tomorrow = today + datetime.timedelta(days=1)

        # Filtra tarefas para o dia atual e para amanh√£
        tasks_today = []
        tasks_tomorrow = []
        
        for task in tarefas:
            try:
                task_start_dt_naive = datetime.datetime.fromisoformat(task['start_when'])
                task_start_dt_aware = SAO_PAULO_TZ.localize(task_start_dt_naive)
                task_date = task_start_dt_aware.date()
            except ValueError:
                continue # Pula tarefas com datas inv√°lidas

            if task_date == today and not task.get('done', False) and task_start_dt_aware > now_aware:
                tasks_today.append(task)
            elif task_date == tomorrow:
                tasks_tomorrow.append(task)

        msg_parts = []
        msg_parts.append(f"‚ú® *Seu Resumo Noturno* ({today.strftime('%d/%m/%Y')}):")
        msg_parts.append("\n_Prepare-se para um dia incr√≠vel!_")

        # Tarefas pendentes para hoje (se houver)
        if tasks_today:
            msg_parts.append("\n‚è∞ Tarefas que *ainda* est√£o pendentes para HOJE:")
            for t in sorted(tasks_today, key=lambda x: datetime.datetime.fromisoformat(x['start_when']).time()):
                start_time = datetime.datetime.fromisoformat(t['start_when']).strftime('%H:%M')
                msg_parts.append(f"‚Ä¢ {t['activity']} √†s {start_time}")
        
        # Tarefas agendadas para amanh√£
        if tasks_tomorrow:
            msg_parts.append(f"\nüóìÔ∏è *Sua agenda para AMANH√É* ({tomorrow.strftime('%d/%m/%Y')}):")
            for t in sorted(tasks_tomorrow, key=lambda x: datetime.datetime.fromisoformat(x['start_when']).time()):
                start_time = datetime.datetime.fromisoformat(t['start_when']).strftime('%H:%M')
                end_time_str = ""
                if t.get('end_when'):
                    end_time_str = f" at√© {datetime.datetime.fromisoformat(t['end_when']).strftime('%H:%M')}"
                msg_parts.append(f"‚Ä¢ {t['activity']} √†s {start_time}{end_time_str}")
        else:
            msg_parts.append("\nüéâ Nada agendado para amanh√£ ainda! Que tal planejar algo produtivo? üòâ")

        msg_parts.append("\nLembre-se: Cada dia √© uma nova chance de brilhar! ‚ú®")

        try:
            await bot.send_message(
                chat_id=int(chat_id),
                text="\n".join(msg_parts),
                parse_mode=ParseMode.MARKDOWN
            )
            context.application.logger.info(f"Resumo di√°rio enviado para {chat_id}.")
        except Exception as e:
            context.application.logger.error(f"Erro ao enviar resumo di√°rio para {chat_id}: {e}", exc_info=True)


async def weekly_report_job(context):
    bot: Bot = context.bot
    data = load_data()

    # Pega a data de hoje no fuso hor√°rio especificado
    now_aware = datetime.datetime.now(SAO_PAULO_TZ)
    today = now_aware.date()
    # Calcula a data de 7 dias atr√°s para pegar a semana
    start_of_week = today - datetime.timedelta(days=today.weekday()) # Volta para a segunda-feira da semana atual
    if today.weekday() == 6: # Se for domingo, a semana come√ßa h√° 6 dias
        start_of_week = today - datetime.timedelta(days=6)
    
    # Para o relat√≥rio semanal, considere a semana anterior completa
    # (por exemplo, de segunda a domingo da semana passada)
    # Se o job roda no domingo √† noite, ele reporta a semana que est√° terminando.
    report_end_date = today
    report_start_date = report_end_date - datetime.timedelta(days=6) # √öltimos 7 dias, incluindo hoje

    for chat_id, user in data.items():
        completed_tasks_week = []
        not_completed_tasks_week = []
        imprevistos_week = []
        weekly_score = 0
        total_score = user.get("score", 0)

        for task in user.get("tarefas", []):
            try:
                task_start_dt_naive = datetime.datetime.fromisoformat(task['start_when'])
                task_start_dt_aware = SAO_PAULO_TZ.localize(task_start_dt_naive)
                task_date = task_start_dt_aware.date()
            except ValueError:
                continue # Pula tarefas com datas inv√°lidas

            if report_start_date <= task_date <= report_end_date:
                if task.get('completion_status') == 'completed_on_time' or task.get('completion_status') == 'completed_manually':
                    completed_tasks_week.append(task['activity'])
                    weekly_score += 10 # Se a tarefa foi conclu√≠da esta semana, soma os pontos
                elif task.get('completion_status') == 'not_completed':
                    not_completed_tasks_week.append(task['activity'])
                    if task.get('reason_not_completed'):
                        imprevistos_week.append(f"- *{task['activity']}*: {task['reason_not_completed']}")

        # --- Envio do resumo semanal via mensagem de texto (mais imediato e alegre) ---
        summary_message = f"üéâ *Seu Relat√≥rio Semanal de Brilho* ({report_start_date.strftime('%d/%m')} a {report_end_date.strftime('%d/%m')}): ‚ú®\n\n"
        
        summary_message += "*üìà Metas da Semana:*\n"
        metas_exist = False
        for m in user.get("metas", []):
            metas_exist = True
            prog = m.get("progress", 0)
            target = m.get("target", 1)
            summary_message += f"‚Ä¢ {m['activity']} ({prog}/{target})\n"
        if not metas_exist:
            summary_message += "Nenhuma meta definida esta semana. Que tal tra√ßar novos horizontes? üöÄ\n"

        summary_message += "\n*‚úÖ Tarefas Conclu√≠das:*\n"
        if completed_tasks_week:
            summary_message += "\n".join(f"‚Ä¢ {t}" for t in completed_tasks_week) + "\n"
        else:
            summary_message += "Nenhuma tarefa conclu√≠da esta semana. Vamos planejar mais para a pr√≥xima! üí™\n"

        summary_message += "\n*‚ùå Tarefas N√£o Conclu√≠das:*\n"
        if not_completed_tasks_week:
            summary_message += "\n".join(f"‚Ä¢ {t}" for t in not_completed_tasks_week) + "\n"
        else:
            summary_message += "Todas as tarefas foram um sucesso! Que maravilha! üéâ\n"

        if imprevistos_week:
            summary_message += "\n*‚ö†Ô∏è Imprevistos e Desafios:*\n"
            summary_message += "\n".join(imprevistos_week) + "\n"

        summary_message += f"\nüìä *Pontua√ß√£o da Semana*: *{weekly_score}* pontos!\n"
        summary_message += f"üèÜ *Pontua√ß√£o Total Acumulada*: *{total_score}* pontos!\n\n"
        summary_message += "Cada passo conta! Continue firme na sua jornada! Voc√™ √© incr√≠vel! ‚ú®"

        try:
            await bot.send_message(
                chat_id=int(chat_id),
                text=summary_message,
                parse_mode=ParseMode.MARKDOWN
            )
            context.application.logger.info(f"Relat√≥rio semanal em texto enviado para {chat_id}.")
        except Exception as e:
            context.application.logger.error(f"Erro ao enviar relat√≥rio semanal em texto para {chat_id}: {e}", exc_info=True)


        # --- Gera√ß√£o e envio do PDF (mantido como uma op√ß√£o robusta de relat√≥rio) ---
        buffer = BytesIO()
        pdf = canvas.Canvas(buffer, pagesize=A4)
        pdf.setTitle("Relat√≥rio Semanal de Produtividade")
        
        # Cores e fontes para um visual mais alegre
        pdf.setFillColorRGB(0.1, 0.4, 0.7) # Azul mais vibrante
        pdf.setFont("Helvetica-Bold", 24)
        pdf.drawString(50, 780, "üåü Seu Relat√≥rio Semanal de Produtividade! üåü")
        
        pdf.setFillColorRGB(0, 0, 0) # Preto
        pdf.setFont("Helvetica", 12)
        y = 750
        
        pdf.drawString(50, y, f"Per√≠odo: {report_start_date.strftime('%d/%m/%Y')} a {report_end_date.strftime('%d/%m/%Y')}")
        y -= 25

        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, "üìà Metas da Semana:")
        y -= 20
        pdf.setFont("Helvetica", 12)
        for m in user.get("metas", []):
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12) # Nova p√°gina se necess√°rio
            pdf.drawString(60, y, f"‚Ä¢ {m['activity']} (Progresso: {m.get('progress', 0)}/{m.get('target', 1)})")
            y -= 15
        if not metas_exist:
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, "Nenhuma meta definida esta semana. Que tal tra√ßar novos horizontes?")
            y -= 15

        y -= 20
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, "‚úÖ Tarefas Conclu√≠das:")
        y -= 20
        pdf.setFont("Helvetica", 12)
        if completed_tasks_week:
            for t_desc in completed_tasks_week:
                if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
                pdf.drawString(60, y, f"‚Ä¢ {t_desc}")
                y -= 15
        else:
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, "Nenhuma tarefa conclu√≠da esta semana. Mas cada novo dia √© uma oportunidade!")
            y -= 15

        y -= 20
        pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, "‚ùå Tarefas N√£o Conclu√≠das:")
        y -= 20
        pdf.setFont("Helvetica", 12)
        if not_completed_tasks_week:
            for t_desc in not_completed_tasks_week:
                if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
                pdf.drawString(60, y, f"‚Ä¢ {t_desc}")
                y -= 15
        else:
            if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
            pdf.drawString(60, y, "Todas as tarefas foram um sucesso! Mandou bem!")
            y -= 15

        if imprevistos_week:
            y -= 20
            pdf.setFont("Helvetica-Bold", 14)
            pdf.drawString(50, y, "‚ö†Ô∏è Imprevistos e Desafios:")
            y -= 20
            pdf.setFont("Helvetica", 12)
            for imp in imprevistos_week:
                if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica", 12)
                pdf.drawString(60, y, imp)
                y -= 15

        y -= 20
        pdf.setFont("Helvetica-Bold", 14)
        if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, f"üìä Pontua√ß√£o da Semana: {weekly_score} pontos")
        y -= 20
        if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica-Bold", 14)
        pdf.drawString(50, y, f"üèÜ Pontua√ß√£o Total Acumulada: {total_score} pontos")
        y -= 30
        
        pdf.setFont("Helvetica-Oblique", 10)
        if y < 100: pdf.showPage(); y = 780; pdf.setFont("Helvetica-Oblique", 10)
        pdf.drawString(50, y, "Lembre-se: Cada passo, por menor que seja, te leva mais perto dos seus sonhos! Continue a brilhar! ‚ú®")

        pdf.showPage()
        pdf.save()
        buffer.seek(0)

        try:
            await bot.send_document(
                chat_id=int(chat_id),
                document=buffer,
                filename=f"relatorio_semanal_{report_end_date.strftime('%Y%m%d')}.pdf",
                caption=f"üéâ Seu Relat√≥rio Semanal de Produtividade est√° aqui! {report_start_date.strftime('%d/%m')} a {report_end_date.strftime('%d/%m')}. üòâ"
            )
            context.application.logger.info(f"Relat√≥rio semanal PDF enviado para {chat_id}.")
        except Exception as e:
            context.application.logger.error(f"Erro ao enviar relat√≥rio semanal PDF para {chat_id}: {e}", exc_info=True)


def weekly_backup_job(context):
    bot: Bot = context.bot # Adicionado para usar o logger do bot/application
    data = load_data()
    # Pega a hora atual no fuso hor√°rio especificado para o timestamp do backup
    timestamp = datetime.datetime.now(SAO_PAULO_TZ).strftime("%Y%m%d_%H%M")

    try:
        # Backup JSON para o diret√≥rio da aplica√ß√£o
        backup_json_path = os.path.join(APP_DIR, f"backup_{timestamp}.json")
        with open(backup_json_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
        context.application.logger.info(f"Backup JSON criado em {backup_json_path}")

        # Backup CSV para o diret√≥rio da aplica√ß√£o
        rows = []
        for chat_id, user in data.items():
            for m in user.get("metas", []):
                rows.append({
                    "chat_id": chat_id,
                    "tipo": "meta",
                    "activity": m["activity"],
                    "progress": m.get("progress", 0),
                    "target": m.get("target", 1),
                    "start_when": None,
                    "end_when": None,
                    "done": None,
                    "completion_status": None,
                    "reason_not_completed": None
                })
            for t in user.get("tarefas", []):
                rows.append({
                    "chat_id": chat_id,
                    "tipo": "tarefa",
                    "activity": t["activity"],
                    "done": t.get("done", False),
                    "start_when": t.get("start_when", ""),
                    "end_when": t.get("end_when", ""),
                    "completion_status": t.get("completion_status", None),
                    "reason_not_completed": t.get("reason_not_completed", None),
                    "progress": None, # N√£o se aplica a tarefas
                    "target": None # N√£o se aplica a tarefas
                })

        df = pd.DataFrame(rows)
        backup_csv_path = os.path.join(APP_DIR, f"backup_{timestamp}.csv")
        df.to_csv(backup_csv_path, index=False)
        context.application.logger.info(f"Backup CSV criado em {backup_csv_path}")

        # Opcional: Enviar os backups para o usu√°rio (se o contexto tiver chat_id)
        # Isso pode gerar muitos arquivos, ent√£o cuidado ao habilitar em produ√ß√£o.
        # Para fins de demonstra√ß√£o, n√£o enviarei os backups para o usu√°rio automaticamente.
        # Se quiser, pode adicionar:
        # for chat_id in data.keys(): # Envia para todos os usu√°rios com dados
        #     await bot.send_document(chat_id=int(chat_id), document=open(backup_json_path, 'rb'), filename=os.path.basename(backup_json_path))
        #     await bot.send_document(chat_id=int(chat_id), document=open(backup_csv_path, 'rb'), filename=os.path.basename(backup_csv_path))

    except Exception as e:
        context.application.logger.error(f"Erro ao realizar o backup semanal: {e}", exc_info=True)
