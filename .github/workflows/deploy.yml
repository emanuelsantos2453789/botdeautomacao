name: Deploy to Production

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    environment: production
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: teste
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov eventlet

    - name: Run database migrations
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/teste
      run: |
        python -c "from app import app; from models import init_app; init_app(app)"
        flask db upgrade

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/teste
        TESTING: 'true'
      run: |
        pytest --cov=app --cov-report=xml tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: Build Docker image
      run: |
        docker build -t myapp:latest .

    - name: Log in to Railway
      uses: railwayapp/action@v1.0.5
      with:
        token: ${{ secrets.RAILWAY_TOKEN }}

    - name: Deploy to Railway
      uses: railwayapp/action@v1.0.5
      with:
        service: my-app-service
        environment: production
        command: >
          gunicorn --worker-class eventlet 
          -w 4 
          -b 0.0.0.0:$PORT 
          --timeout 120 
          --access-logfile - 
          --error-logfile - 
          backend.app:app
        healthcheck_path: /api/health
        healthcheck_timeout: 30
        env_vars: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          FLASK_ENV=production
          PORT=${{ secrets.PORT }}

    - name: Run smoke test
      run: |
        curl --retry 5 --retry-delay 10 --retry-max-time 60 --fail ${{ secrets.PRODUCTION_URL }}/api/health

    - name: Notify Slack
      uses: rtCamp/action-slack-notify@v2
      if: always()
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
        SLACK_TITLE: 'Deploy Result'
        SLACK_MESSAGE: 'Deploy ${{ job.status }} for commit ${{ github.sha }}'
